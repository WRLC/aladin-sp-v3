{% extends 'base.html.twig' %}

{% if type == 'add' %}
    {% set command = 'Add' %}
{% elseif type == 'edit' %}
    {% set command = 'Edit' %}
{% endif %}

{% block title %}{{ command }} Institutional Service | WRLC Aladin-SP{% endblock %}

{% block body %}
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            {% if return == service %}
                <li class="breadcrumb-item"><a href="{{ path('list_services') }}">Services</a></li>
                <li class="breadcrumb-item"><a href="{{ path('show_service', {'slug': service.slug}) }}">{{ service.name }}</a></li>
            {% elseif institution %}
                <li class="breadcrumb-item"><a href="{{ path('list_institutions') }}">Institutions</a></li>
                <li class="breadcrumb-item"><a href="{{ path('show_institution', {'index': institution.index}) }}">{{ institution.name }}</a></li>
            {% endif %}
            <li class="breadcrumb-item active" aria-current="page">{{ command }} Institutional Service</li>
        </ol>
    </nav>
    <h1>{{ command }} Institutional Service</h1>
    {{ form_start(form) }}
    {% if form_errors(form) %}
        <div class="alert alert-danger">
            {{ form_errors(form) }}
        </div>
    {% endif %}
        <div class="mb-3{% if form.institution.vars.required %} required{% endif %}">
            {{ form_label(form.institution) }}
            {{ form_widget(form.institution, {'attr': {'style': 'pointer-events: none; display: none;'}}) }}
            <div class="text-secondary">{{ institution.name }}</div>
            {{ form_errors(form.institution) }}
        </div>
        <div class="mb-3{% if form.service.vars.required %} required{% endif %}">
            {{ form_label(form.service) }}
            {{ form_widget(form.service, {'attr': {'style': 'pointer-events: none; display: none;'}}) }}
            <div class="text-secondary">{{ service.name }}</div>
            {{ form_errors(form.service) }}
        </div>
        <div class="mb-3{% if form.authz_type.vars.required %} required{% endif %}">
            {{ form_label(form.authz_type) }}
            {{ form_widget(form.authz_type) }}
            {{ form_help(form.authz_type) }}
            {{ form_errors(form.authz_type) }}
        </div>
        {% if type == 'add' %}
            {% set class = 'd-none' %}
            {% set member_type = '' %}
        {% elseif form.authz_type.vars.value == 'none' %}
            {% set class = 'd-none' %}
            {% set member_type = '' %}
        {% elseif form.authz_type.vars.value == 'any_alma' %}
            {% set class = 'd-none' %}
            {% set member_type = '' %}
        {% else %}
            {% set class = 'mb-3' %}
            {% if form.authz_type.vars.value == 'user_id' %}
                {% set member_type = 'User' %}
            {% elseif form.authz_type.vars.value == 'user_role' %}
                {% set member_type = 'Role' %}
            {% elseif form.authz_type.vars.value == 'user_group' %}
                {% set member_type = 'Group' %}
            {% endif %}
        {% endif %}
        <div class="{{ class }}" id="authz_members_container">
            {{ form_label(form.authz_members) }}
            {{ form_help(form.authz_members) }}
            <div class="members"
                 data-index="{{ form.authz_members|length > 0 ? form.authz_members|last.vars.name + 1 : 0 }}"
                 data-prototype="{{ form_widget(form.authz_members.vars.prototype)|e('html_attr') }}"
            >
                {% for member in form.authz_members %}
                    <div class="row">
                        {{ form_widget(member, {'attr': {'class': 'mb-3 col col-11'}}) }}
                    </div>
                {% else %}
                    {% do form.authz_members.setRendered %}
                {% endfor %}
            </div>
            <button type="button" id="add_authz_member_button" class="btn btn-success btn-sm add_item_link" data-collection-holder-class="members"><strong> + Add an authorized {{ member_type }}</strong></button>
            {{ form_errors(form.authz_members) }}
        </div>
        <div class="mb-3{% if form.id_attribute.vars.required %} required{% endif %}">
            {{ form_label(form.id_attribute) }}
            {{ form_widget(form.id_attribute) }}
            {{ form_help(form.id_attribute) }}
            {{ form_errors(form.id_attribute) }}
        </div>
        <div class="mb-3">
            {% if command == 'Add' %}
                {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}, 'label': 'Add Institutional Service'}) }}
            {% elseif command == 'Edit' %}
                {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}, 'label': 'Update Institutional Service'}) }}
            {% endif %}
        </div>
    {{ form_end(form) }}
    <script type="application/javascript">
        document
            .querySelector('#institution_service_authz_type')
            .addEventListener('change', showHideAuthzMembers);
        document
            .querySelectorAll('div.members div.row')
            .forEach((item) => {
                addMemberFormDeleteLink(item);
            });

        document
            .querySelectorAll('.add_item_link')
            .forEach(btn => {
                btn.addEventListener("click", addFormToCollection)
            });

        function addFormToCollection(e) {
            const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);

            const item = document.createElement('div');

            item.setAttribute('class', 'row')

            item.innerHTML = collectionHolder
                .dataset
                .prototype
                .replace(
                    /__name__/g,
                    collectionHolder.dataset.index
                )
                .replace(
                    "input",
                    "input class=\"form-control\""
                );

            addMemberFormDeleteLink(item);

            collectionHolder.appendChild(item);

            collectionHolder.dataset.index++;
        }

        function addMemberFormDeleteLink(item) {
            const removeFormDiv = document.createElement('div');
            removeFormDiv.setAttribute('class', 'col col-1');

            const removeFormButton = document.createElement('button');
            removeFormButton.setAttribute('class', 'btn btn-danger btn-sm remove_item_link');
            removeFormButton.innerHTML = '<strong>-</strong>';

            removeFormDiv.appendChild(removeFormButton);

            item.append(removeFormDiv);

            removeFormButton.addEventListener('click', (e) => {
                e.preventDefault();
                item.remove();
            })
        }

        function showHideAuthzMembers() {
            const authzType = document.querySelector('#institution_service_authz_type');
            const authzMembersContainer = document.querySelector('#authz_members_container');
            console.log(authzMembersContainer.getElementsByTagName('button'));
            if (authzType.value === 'none' || authzType.value === 'any_alma' || authzType.value === '') {
                authzMembersContainer.classList.add('d-none');
            } else {
                authzMembersContainer.classList.remove('d-none');
                let existingHelp = document.getElementById('institution_service_authz_members_help');
                if (existingHelp) {
                    existingHelp.remove();
                }
                authzMembersContainer.classList.add('mb-3');
                authzMembersContainer.classList.add('required');
                if (authzType.value === 'user_id') {
                    authzMembersContainer.getElementsByTagName('label')[0].innerText = 'Authorized User IDs';
                    document.getElementById('add_authz_member_button').innerHTML = '<strong> + Add an Authorized User</strong>';
                    let help = '<div id="institution_service_authz_members_help" class="mb-3 text-secondary form-text help-text">The specific IdP User IDs that are authorized to access this service. (Each value should be added separately.)</div>';
                    authzMembersContainer.getElementsByTagName('label')[0].insertAdjacentHTML('afterend', help);
                } else if (authzType.value === 'user_role') {
                    authzMembersContainer.getElementsByTagName('label')[0].innerText = 'Authorized Roles';
                    document.getElementById('add_authz_member_button').innerHTML = '<strong> + Add an Authorized Role</strong>';
                    let help = '<div id="institution_service_authz_members_help" class="mb-3 text-secondary form-text help-text">The specific Alma Roles (by ID number, not label) that are authorized to access this service. (Each value should be added separately.)</div>';
                    authzMembersContainer.getElementsByTagName('label')[0].insertAdjacentHTML('afterend', help);
                } else if (authzType.value === 'user_group') {
                    authzMembersContainer.getElementsByTagName('label')[0].innerText = 'Authorized Groups';
                    document.getElementById('add_authz_member_button').innerHTML = '<strong> + Add an Authorized Group</strong>';
                    let help = '<div id="institution_service_authz_members_help" class="mb-3 text-secondary form-text help-text">The specific Alma Groups (by name, not label) that are authorized to access this service. (Each value should be added separately.)</div>';
                    authzMembersContainer.getElementsByTagName('label')[0].insertAdjacentHTML('afterend', help);
                }
            }
        }


    </script>
{% endblock %}